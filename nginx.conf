user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

    server{
        # listen for SSL
        listen 443 ssl;

        # configure a domain name
        server_name                 your.domain.name;

        # specify the server certificate
        ssl_certificate             server_certificate_folder/server.cer;
        ssl_certificate_key         server_certificate_folder/server.key;

        # tell your server to accept client certificates only from Identity Plus.
        # If you need to trust more issuers it is imperrative that you validate the authority as well
        # serial numbers from different authorities may clash
        ssl_client_certificate      server_certificate_folder/identity-plus-trust-store.pem;

        # require client certificate from clients
        ssl_verify_client           on;

        # identity plus needs a depth of 2 for certificate verification
        ssl_verify_depth            2;

        # make your server's TLS strong
        ssl_protocols               TLSv1.2;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers                 AES256+EECDH:AES256+EDH:!aNULL;

        # define a location criteria
        location / {

            # pass down the client's IP address
            proxy_set_header    X-Forwarded-For $remote_addr;
            proxy_set_header    X-Client-Ip $remote_addr;
            
            # engage identity plus module
            rewrite_by_lua_block {

                -- define constants, identity plus API home and the cahce timeout
                -- nginx must have read/write access to the HOME folder
                -- home folder must contain two folders, cache and identity
                -- identity folder will contain the agent client certificate "agent-id.key" and "agent-id.cer"
                local HOME = "/../this/is/the/lua integration home "
                local CACHE_TIMEOUT = 1800
                local API_HOME = 'https://api.identity.plus/v1'

                -- read the serial number, this will be a hexadecimal integer value
                local serial = ngx.var.ssl_client_serial

                -- see if we have information about this serial cached                
                -- we will cache responses from identity plus to avoid introducing a lag in each and every request
                local result = ""
                local cache = io.open(HOME.."/cache/"..serial, "r")
                
                -- if the cache file exist load from cache
                if cache ~= nil then
                    result = cache:read("*all")
                    cache:close()

                    -- determine how long the value was cached
                    local result_index = string.find(result, "{", 0, true)
                    local cache_time = os.time() - tonumber(string.sub(result, 0, result_index -1))
                    result = string.sub(result, result_index)

                    -- if cache is older than the timeout defined, we will invalidate the cache
                    if cache_time > CACHE_TIMEOUT then
                        cache = nil
                    end
                    
                    -- this is for debug purpose
                    -- ngx.req.set_header("X-Cache-Delta", cache_time)
                end

                -- if we have no cache, we use a second if instead of else, because
                -- cache can be invalidated in the previous if block
                if cache == nil then

                    -- make the call to identity plus api to find out about the certificate
                    local cmd = '/usr/bin/curl -sk -X GET -H "Content-Type: application/json" -d \'{"Identity-Inquiry": {"serial-number": "0x'..serial..'"}}\' --key '..HOME..'/identity/agent-id.key --cert '..HOME..'/identity/agent-id.cer '..API_HOME

                    -- this is for debug purpose
                    -- ngx.req.set_header("X-IDP-Command", cmd)

                    -- read the output of the command into the result variable
                    local output = io.popen(cmd, 'r')
                    result = output:read('*all')
                    output:close()
                end

                -- if the response is anything other than OK or we have no service-roles defined (it means there is no relationship of any kind)
                -- we will terminate the SSL connection, with no response
                if string.find(result, "OK 0001", 0, true) == nil or string.find(result, "service-roles", 0, true) == nil then
                    -- set some response headers for dev purposes, in production we will just
                    -- terminate the connection
                    ngx.status = 400
                    ngx.header["Content-Type"] = "text/plain"
                    ngx.say("Very bad SSL request")

                    -- terminate the connection
                    return ngx.exit(400)
                else

                    -- update the cache and prefix it with timestamp
                    if cache == nil then
                        cache = io.open(HOME.."/cache/"..serial, "w")
                        cache:write(os.time()..result)
                        cache:close()
                    end                    

                    -- extract the roles list, we know we have one, and remove quotes
                    s, e = string.find(result, "service-roles", 0, true)
                    ss, ee = string.find(result, "]", e, true)
                    local roles = string.sub(result, e + 4, ss -1):gsub('"', '')

                    -- set the service roles header
                    ngx.req.set_header("X-Client-Roles", roles)
                end

                -- set the certificate serial header (append 0x to denote the hexa value)
                ngx.req.set_header("X-TLS-Client-Serial", "0x"..serial)

                -- this is for debug purposes
                ngx.req.set_header("X-IDP-Response", result)

            }

            # configure proxy forwarding
            proxy_pass          http://10.0.X.X:8080;
        }
    }
}



