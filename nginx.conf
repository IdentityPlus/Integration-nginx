user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {
    
    lua_package_path "/etc/nginx/zero-trust-nginx/?.lua;;";

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
    server_names_hash_bucket_size  64;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

    ##
    # Logging Settings
    ##	
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # SSL Settings
    # Configure globally the Identity Plus trust store and the requirement for client certificate
    ##
    ssl_protocols               TLSv1.2;
    ssl_prefer_server_ciphers   on;
    ssl_ciphers                 AES256+EECDH:AES256+EDH:!aNULL;

    # This trust store must contain all authorities you accept client certificate from. If you have multiple authorities you must handle which authority issued the 
    # authenticting client certificate, otherwise authorities can issue certificates with identical content, down to certificate id, which can break your authentication process.
    # We recommend you use dedicated trust store containing only the roots you accept certificates from. If you only autheticate clients from Identity Plus you can grab a  
    # a pre-built trust store here https://my.identity.plus/download/trust-chain?format=pem
    ssl_client_certificate      /etc/nginx/zero-trust-nginx/identity-plus-trust-store.pem;
    
    # Normally you'd put this value to (on), which means strict TLS authentication (server would drop the connnection without a proper certificate). You can do this, 
    # but it will prevent some processing and UX capabilities and it is not strictly necessary to enable authenticate-to-connect mode.
    # The identity plus module will treat the lack of certificate as one of the several invalid (unauthenticated) cases, and the request will never reach the upstream application
    ssl_verify_client           optional;
    ssl_verify_depth            2;

    # configure identity plus lua module and define memory cache
    init_by_lua_file /etc/nginx/zero-trust-nginx/config.lua;
    lua_shared_dict identity_plus_memcache 100m;



	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    map  $ssl_client_s_dn  $ssl_client_s_dn_cn {
        default "";
        ~(^|,)CN=(?<CN>[^,]+) $CN;
    }

    map  $ssl_client_s_dn  $ssl_client_s_dn_ou {
        default "";
        ~(^|,)OU=(?<OU>[^,]+) $OU;
    }


	##
	# Virtual Host Configs
	##

    # Gracefully redirect non-https to https. This is one of the functionalities that is not available with strict client authentication
    server {
        listen 80;
        server_name serviceone.yourorg.idplus.zone;
        return 301 https://serviceone.yourorg.idplus.zone$request_uri;
    }

    server {
        listen 80;
        server_name servicetwo.yourorg.idplus.zone;
        return 301 https://servicetwo.yourorg.idplus.zone$request_uri;
    }

    # Configure Identity Plus based TLS authentication
    server{
        listen 443 ssl;
        server_name                 serviceone.yourorg.idplus.zone;
        # This is the server certificate. You can get one for free from Identity Plus for development or personal purposes. You will have to ad the Identity Plus root certificate to your browser trust store
        # For commercial purposes we reommed you purchase one from a trusted certificate authority. The Identity Plus Lua module can work with server certificates issued by other authorities.
        ssl_certificate             /etc/serviceone.yourorg.idplus.zone/agent-id/service/serviceone.yourorg.idplus.zone.cer;
        ssl_certificate_key         /etc/serviceone.yourorg.idplus.zone/agent-id/service/serviceone.yourorg.idplus.zone.key;
	    proxy_buffering off;

        # Invoke the identity plus lua module to validate the certificate
        # set_by_lua_file $identity_plus_roles /etc/nginx/zero-trust-nginx/identity-plus.lua;
        set_by_lua_block $identity_plus_roles {
            local identityplus = require "identityplus"
            return identityplus.init()
        }

        # Identity Plus dynamic diagnostic page;
        location /identityplus/diagnose {
            access_by_lua_block {
                local identityplus = require "identityplus"
                identityplus.diagnostics()
            }
        }

        # you can define different roles and access based on different location patterns. "/" will apply it for any URL on this domain
        location / {

            # terminate the connection if the role do not match with the 
            access_by_lua_block {
                local identityplus = require "identityplus"
                identityplus.ensure_role({'"member"', '"administrator"'})
            } 

            # configure headers to be forwarded upstream
            proxy_set_header    X-Forwarded-For $remote_addr;
            proxy_set_header    X-Client-Ip $remote_addr;
            proxy_set_header    X-TLS-Client-Serial $ssl_client_serial;
            proxy_set_header    X-Client-Roles $identity_plus_roles;

            # authentication successful, forward to your upstream service 
            proxy_pass          http://192.168.0.x:8080;
        }
    }

    server{
        listen 443 ssl;
        server_name                 servicetwo.yourorg.idplus.zone;
        # This is the server certificate. You can get one for free from Identity Plus for development or personal purposes. You will have to ad the Identity Plus root certificate to your browser trust store
        # For commercial purposes we reommed you purchase one from a trusted certificate authority. The Identity Plus Lua module can work with server certificates issued by other authorities.
        ssl_certificate             /etc/servicetwo.yourorg.idplus.zone/agent-id/service/servicetwo.yourorg.idplus.zone.cer;
        ssl_certificate_key         /etc/servicetwo.yourorg.idplus.zone/agent-id/service/servicetwo.yourorg.idplus.zone.key;
	    proxy_buffering off;

        # invoke the identity plus lua module to validate the certificate
        # set_by_lua_file $identity_plus_roles /etc/nginx/zero-trust-nginx/identity-plus.lua;
        set_by_lua_block $identity_plus_roles {
            local identityplus = require "identityplus"
            return identityplus.init()
        }

        # Identity Plus dynamic diagnostic page;
        location /identityplus/diagnose {
            access_by_lua_block {
                local identityplus = require "identityplus"
                identityplus.diagnostics()
            }
        }

        # you can define different roles and access based on different location patterns. "/" will apply it for any URL on this domain
        location /my-path/ {

            # terminate the connection if the role do not match with the 
            access_by_lua_block {
                local identityplus = require "identityplus"
                identityplus.ensure_role({'"customer"', '"administrator"'})
            } 

            # configure headers to be forwarded upstream
            proxy_set_header    X-Forwarded-For $remote_addr;
            proxy_set_header    X-Client-Ip $remote_addr;
            proxy_set_header    X-TLS-Client-Serial $ssl_client_serial;
            proxy_set_header    X-Client-Roles $identity_plus_roles;

            proxy_pass          http://192.168.0.y:8080;
        }
    }
}



